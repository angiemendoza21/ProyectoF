import os

# Funci√≥n para limpiar la pantalla de la consola
def limpiar_pantalla():
    os.system('cls')  # Ejecuta el comando 'cls' en Windows para limpiar la consola

# Clase Tarea para representar una tarea con nombre, descripci√≥n y prioridad
class Tarea:
    def __init__(self, nombre, descripcion, prioridad):
        # Inicializa los atributos de la tarea y realiza validaciones
        self.nombre = nombre.strip()  # Elimina espacios en blanco del nombre
        self.descripcion = descripcion.strip()  # Elimina espacios en blanco de la descripci√≥n
        self.prioridad = prioridad.lower()  # Convierte la prioridad a min√∫sculas

        # Validaci√≥n: verifica que el nombre no est√© vac√≠o
        if not self.nombre:
            raise ValueError("El nombre no puede estar vac√≠o")

        # Validaci√≥n: verifica que la descripci√≥n no est√© vac√≠a
        if not self.descripcion:
            raise ValueError("La descripci√≥n no puede estar vac√≠a")

        # Validaci√≥n: verifica que la prioridad sea v√°lida
        if not self.validar_prioridad(self.prioridad):
            raise ValueError("La prioridad debe ser alta, media o baja")

    # M√©todo est√°tico para validar que la prioridad es 'alta', 'media' o 'baja'
    @staticmethod
    def validar_prioridad(prioridad):
        return prioridad in ["alta", "media", "baja"]

# Clase GestorTareas para gestionar las tareas por prioridad
class GestorTareas:
    def __init__(self):
        # Inicializa listas para cada nivel de prioridad
        self.tareas_alta = []    # Tareas de alta prioridad (Pila - LIFO)
        self.tareas_media = []   # Tareas de media prioridad (Cola - FIFO)
        self.tareas_baja = []    # Tareas de baja prioridad (Lista est√°ndar)
        self.archivo_tareas = "tareas.txt"  # Nombre del archivo de almacenamiento
        self.cargar_tareas()  # Carga tareas desde el archivo al iniciar

    # M√©todo para agregar una nueva tarea
    def agregar_tarea(self, nombre, descripcion, prioridad):
        try:
            nueva_tarea = Tarea(nombre, descripcion, prioridad)  # Crea la tarea

            # Comprueba si la tarea ya existe en alguna lista
            for lista in [self.tareas_alta, self.tareas_media, self.tareas_baja]:
                for tarea in lista:
                    if tarea.nombre == nombre:
                        print(f"‚ùå La tarea '{nombre}' ya existe")
                        return

            # Agrega la tarea en la lista correspondiente seg√∫n su prioridad
            if prioridad == "alta":
                self.tareas_alta.append(nueva_tarea)
            elif prioridad == "media":
                self.tareas_media.append(nueva_tarea)
            else:
                self.tareas_baja.append(nueva_tarea)

            print(f"\n‚úÖ Tarea '{nombre}' agregada con √©xito")
            self.guardar_tareas()  # Guarda los cambios en el archivo
        except ValueError as e:
            print(f"‚ùå Error al agregar tarea: {e}")

    # M√©todo para eliminar una tarea por su nombre
    def eliminar_tarea(self, nombre):
        # Busca la tarea en cada lista de prioridades
        for lista in [self.tareas_alta, self.tareas_media, self.tareas_baja]:
            for tarea in lista:
                if tarea.nombre == nombre:
                    lista.remove(tarea)  # Elimina la tarea si se encuentra
                    print(f"\n‚úÖ Tarea '{nombre}' eliminada con √©xito")
                    self.guardar_tareas()  # Guarda los cambios en el archivo
                    return
        print(f"\n‚ùå No se encontr√≥ la tarea '{nombre}'")

    # M√©todo para mostrar todas las tareas seg√∫n su prioridad
    def mostrar_tareas(self):
        if not (self.tareas_alta or self.tareas_media or self.tareas_baja):
            print("\nüìù No hay tareas pendientes")
            return

        print("\n--- LISTA DE TAREAS ---")

        # Muestra las tareas de alta prioridad en orden LIFO
        print("\nüìã Tareas de alta prioridad (LIFO):")
        for tarea in reversed(self.tareas_alta):
            print(f"- {tarea.nombre}: {tarea.descripcion}")

        # Muestra las tareas de media prioridad en orden FIFO
        print("\nüìã Tareas de media prioridad (FIFO):")
        for tarea in self.tareas_media:
            print(f"- {tarea.nombre}: {tarea.descripcion}")

        # Muestra las tareas de baja prioridad en orden de lista est√°ndar
        print("\nüìã Tareas de baja prioridad:")
        for tarea in self.tareas_baja:
            print(f"- {tarea.nombre}: {tarea.descripcion}")

    # M√©todo para procesar y eliminar tareas en el orden de prioridad
    def procesar_tareas(self):
        if not (self.tareas_alta or self.tareas_media or self.tareas_baja):
            print("\nüìù No hay tareas para procesar")
            return

        print("\nüîÑ Procesando tareas...")

        # Procesa y elimina las tareas de alta prioridad (LIFO)
        while self.tareas_alta:
            tarea = self.tareas_alta.pop()
            print(f"‚ö° Procesando tarea de alta prioridad: {tarea.nombre} - {tarea.descripcion}")

        # Procesa y elimina las tareas de media prioridad (FIFO)
        while self.tareas_media:
            tarea = self.tareas_media.pop(0)
            print(f"‚ö° Procesando tarea de media prioridad: {tarea.nombre} - {tarea.descripcion}")

        # Procesa y elimina las tareas de baja prioridad en orden
        while self.tareas_baja:
            tarea = self.tareas_baja.pop(0)
            print(f"‚ö° Procesando tarea de baja prioridad: {tarea.nombre} - {tarea.descripcion}")

        print("‚úÖ Todas las tareas han sido procesadas")
        self.guardar_tareas()  # Guarda los cambios en el archivo

    # M√©todo para guardar las tareas en un archivo
    def guardar_tareas(self):
        try:
            with open(self.archivo_tareas, "w") as archivo:
                # Guarda cada tarea en el archivo con formato CSV
                for lista in [self.tareas_alta, self.tareas_media, self.tareas_baja]:
                    for tarea in lista:
                        archivo.write(f"{tarea.nombre},{tarea.descripcion},{tarea.prioridad}\n")
        except IOError as e:
            print(f"‚ùå Error al guardar tareas: {e}")

    # M√©todo para cargar tareas desde un archivo al iniciar
    def cargar_tareas(self):
        if not os.path.exists(self.archivo_tareas):
            return  # Retorna si el archivo no existe

        try:
            with open(self.archivo_tareas, "r") as archivo:
                # Carga y agrega cada tarea en la lista correspondiente
                for linea in archivo:
                    nombre, descripcion, prioridad = linea.strip().split(",")
                    self.agregar_tarea(nombre, descripcion, prioridad)
        except Exception as e:
            print(f"‚ùå Error al cargar tareas: {e}")

# Funci√≥n para mostrar el men√∫ principal
def mostrar_menu():
    print("========================")
    print("=== GESTOR DE TAREAS ===")
    print("========================")
    print("1Ô∏è‚É£. Agregar tarea")
    print("2Ô∏è‚É£. Eliminar tarea")
    print("3Ô∏è‚É£. Mostrar tareas")
    print("4Ô∏è‚É£. Procesar tareas")
    print("5Ô∏è‚É£. Salir")
    print("========================")

# Funci√≥n principal que controla la ejecuci√≥n del programa
def main():
    gestor = GestorTareas()  # Crea una instancia de GestorTareas

    while True:
        limpiar_pantalla()  # Limpia la pantalla de la consola
        mostrar_menu()  # Muestra el men√∫ principal
        opcion = input("\nElige una opci√≥n (1-5): ")  # Pide una opci√≥n al usuario

        if opcion == "1":
            # Agrega una tarea
            nombre = input("Nombre de la tarea: ")
            descripcion = input("Descripci√≥n de la tarea: ")
            prioridad = input("Prioridad (alta/media/baja): ")
            gestor.agregar_tarea(nombre, descripcion, prioridad)

        elif opcion == "2":
            # Elimina una tarea
            nombre = input("Nombre de la tarea a eliminar: ")
            gestor.eliminar_tarea(nombre)

        elif opcion == "3":
            # Muestra todas las tareas
            gestor.mostrar_tareas()

        elif opcion == "4":
            # Procesa todas las tareas
            gestor.procesar_tareas()

        elif opcion == "5":
            limpiar_pantalla()  # Limpia la pantalla antes de salir
            print("üëã ¬°Hasta luego!")
            break  # Sale del bucle y termina el programa

        else:
            print("‚ùå Opci√≥n no v√°lida. Por favor, elige una opci√≥n del 1 al 5.")

        input("\nPresiona Enter para continuar...")  # Pausa para ver el resultado antes de continuar

# Ejecuta el programa
if __name__ == "__main__":
    main()
